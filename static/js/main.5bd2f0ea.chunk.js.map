{"version":3,"sources":["serviceWorker.js","component/Post/Post.jsx","container/BlogPost/BlogPost.jsx","container/Product/Product.jsx","container/Home/Home.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Post","props","className","src","alt","data","title","body","onClick","update","remove","id","BlogPost","state","post","formBlogPost","userId","isUpdate","getPostAPI","axios","get","then","res","setState","postDataAPI","err","console","log","putDataAPI","put","handleUpdate","handleRemove","delete","handleFormChange","event","newFormBlogPost","target","value","timestamp","Date","getTime","name","handleSubmit","this","htmlFor","type","placeholder","onChange","cols","rows","map","key","Component","Product","Home","to","path","exact","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5bd2f0ea.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className=\"post\">\r\n            <div className=\"img-thumb\">\r\n                <img src=\"http://placeimg.com/200/150/tech\" alt=\"\" />\r\n            </div>\r\n            <div className=\"content\">\r\n                <p className=\"title\">{props.data.title}</p>\r\n                <p className=\"desc\">{props.data.body}</p>\r\n                <button className=\"update\" onClick={() => props.update(props.data)}>Update</button>\r\n                <button className=\"remove\" onClick={() => props.remove(props.data.id)}>Remove</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React, { Component, Fragment } from 'react'\r\nimport './BlogPost.css'\r\nimport Post from '../../component/Post/Post'\r\nimport axios from 'axios'\r\n\r\nclass BlogPost extends Component {\r\n    state = {\r\n        post: [],\r\n        formBlogPost: {\r\n            userId: 1,\r\n            id: 1,\r\n            title: '',\r\n            body: ''\r\n        },\r\n        isUpdate: false\r\n    }\r\n\r\n    getPostAPI = () => {\r\n        // GET ES6\r\n        // fetch('http://jsonplaceholder.typicode.com/posts')\r\n        // .then(res => res.json())\r\n        // .then(json => {\r\n        //     this.setState({\r\n        //         post: json\r\n        //     })\r\n        // })\r\n        \r\n        //GET AXIOS\r\n        axios.get('http://localhost:3004/posts?_sort=id&_order=desc')\r\n        .then((res) => {\r\n            this.setState({\r\n                post: res.data\r\n            })\r\n        })\r\n    }\r\n\r\n    postDataAPI = () => {\r\n        axios.post(`http://localhost:3004/posts/`, this.state.formBlogPost)\r\n        .then((res) => {\r\n            this.getPostAPI()\r\n            this.setState({\r\n                formBlogPost: {\r\n                    userId: 1,\r\n                    id: 1,\r\n                    title: '',\r\n                    body: ''\r\n                },\r\n            })\r\n        }, (err) => {\r\n            console.log('error: ', err)\r\n        })\r\n    }\r\n\r\n    putDataAPI = (data) => {\r\n        axios.put(`http://localhost:3004/posts/${this.state.formBlogPost.id}`, this.state.formBlogPost)\r\n        .then((res) => {\r\n            this.getPostAPI()\r\n            this.setState({\r\n                isUpdate: false,\r\n                formBlogPost: {\r\n                    userId: 1,\r\n                    id: 1,\r\n                    title: '',\r\n                    body: ''\r\n                },\r\n            })\r\n        }, (err) => {\r\n            console.log('error: ', err)\r\n        })\r\n    }\r\n\r\n    handleUpdate = (data) => {\r\n        this.setState({\r\n            formBlogPost: data,\r\n            isUpdate: true\r\n        })\r\n    }\r\n    \r\n    handleRemove = (data) => {\r\n        axios.delete(`http://localhost:3004/posts/${data}`)\r\n        .then((res) => {\r\n            this.getPostAPI()\r\n        })\r\n    }\r\n\r\n    handleFormChange = (event) => {\r\n        let newFormBlogPost = {...this.state.formBlogPost}\r\n        let title = event.target.value\r\n        let timestamp = new Date().getTime()\r\n        if(!this.state.isUpdate) {\r\n            newFormBlogPost['id'] = timestamp\r\n        }\r\n        newFormBlogPost[event.target.name] = title\r\n\r\n        this.setState({\r\n            formBlogPost: newFormBlogPost\r\n        })\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        this.state.isUpdate === true ? this.putDataAPI() : this.postDataAPI() \r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.getPostAPI()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <p className=\"section-title\">Blog Post</p>\r\n                <div className=\"form-add-post\">\r\n                    <label htmlFor=\"title\">Title</label>\r\n                    <input type=\"text\" name=\"title\" value={this.state.formBlogPost.title} placeholder=\"add title\" onChange={this.handleFormChange} />\r\n                    <label htmlFor=\"body\">Body</label>\r\n                    <textarea name=\"body\" value={this.state.formBlogPost.body} id=\"body\" cols=\"30\" rows=\"10\" placeholder=\"add blog content\" onChange={this.handleFormChange}></textarea>\r\n                    <button className=\"btn-submit\" onClick={this.handleSubmit}>Simpan</button>\r\n                </div>\r\n                {\r\n                    this.state.post.map(post => {\r\n                        return <Post key={post.id} data={post} remove={this.handleRemove} update={this.handleUpdate} />\r\n                    })\r\n                }\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BlogPost","import React, { Component } from 'react';\r\n\r\nclass Product extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>INI HALAMAN PRODUCT</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Product;","import React, { Component, Fragment } from 'react';\r\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\r\nimport BlogPost from '../BlogPost/BlogPost';\r\nimport Product from '../Product/Product';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Fragment>\r\n                    <div>\r\n                        <Link to=\"/\">Blog Post</Link>\r\n                        <Link to=\"/product\">Product</Link>\r\n                    </div>\r\n                    <Route path=\"/\" exact component={BlogPost} />\r\n                    <Route path=\"/product\" component={Product} />\r\n                </Fragment>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './container/Home/Home';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}